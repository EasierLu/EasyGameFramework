using Luban;

{{namespace_with_grace_begin __namespace}}
    public partial class {{__name}}
    {
        {{~for table in __tables ~}}
    {{~if table.comment != '' ~}}
        /// <summary> {{escape_comment table.comment}} </summary>
    {{~end~}}
        public {{table.full_name}} {{format_property_name __code_style table.name}} {get; private set;}
        {{~end~}}

        private void Load(System.Func<string, ByteBuf> loader)
        {
            {{~for table in __tables ~}}
            //{{escape_comment table.comment}}
            {{format_property_name __code_style table.name}} = new {{table.full_name}}(loader("{{table.output_data_file}}"));
            {{~end~}}
            ResolveRef();
        }

        private async Cysharp.Threading.Tasks.UniTask LoadAsync(System.Func<string, Cysharp.Threading.Tasks.UniTask<ByteBuf>> loader, System.IProgress<float> progress)
        {
            int tablesNum = {{__tables.size}};
            {{index = 0}}
            {{~for table in __tables ~}}
            //{{escape_comment table.comment}}
            var {{format_property_name __code_style table.name}}_loader = await loader("{{table.output_data_file}}");
            {{format_property_name __code_style table.name}} = new {{table.full_name}}({{format_property_name __code_style table.name}}_loader);
            progress?.Report({{++index}}f / tablesNum);

            {{~end~}}

            ResolveRef();
        }
        
        private void ResolveRef()
        {
            {{~for table in __tables ~}}
            {{format_property_name __code_style table.name}}.ResolveRef(this);
            {{~end~}}
        }

        public void Dispose()
        {
            {{~for table in __tables ~}}
            //{{escape_comment table.comment}}
            {{format_property_name __code_style table.name}} = null;
            {{~end~}}
        }
    }

{{namespace_with_grace_end __namespace}}